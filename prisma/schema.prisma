// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    cv CV[]

    generalInfo        GeneralInfo?
    educationInfo      EducationInfo[]
    workInfo           WorkInfo[]
    skillInfo          SkillInfo[]
    accomplishmentInfo AccomplishmentInfo[]
    Certifications     Certifications[]
    projectInfo        ProjectInfo[]
    publicationInfo    PublicationInfo[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model CV {
    id          String   @id @default(cuid())
    theme       String
    userId      String
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    dateCreated DateTime @default(now())
    custom      Custom[]
}

model Custom {
    id          String  @id @default(cuid())
    cv          CV?     @relation(fields: [cvId], references: [id])
    cvId        String?
    label       String
    description String  @db.Text
}

model GeneralInfo {
    id          String    @id @default(cuid())
    userId      String    @unique
    user        User      @relation(fields: [userId], references: [id])
    name        String?
    address     String?
    zipCode     Int?
    dateOfBirth DateTime?
    nationality String?
    sex         String?
    religion    String?
}

model EducationInfo {
    id                  String   @id @default(cuid())
    userId              String
    user                User     @relation(fields: [userId], references: [id])
    institutionName     String?
    institutionLocation String?
    degreeName          String?
    grade               Float?
    startMonth          String?
    startYear           String?
    endMonth            String?
    endYear             String?
    currentlyIn         Boolean? @default(false)
    fieldOfStudy        String?
    description         String?  @db.Text
}

model WorkInfo {
    id          String   @id @default(cuid())
    userId      String
    user        User     @relation(fields: [userId], references: [id])
    position    String?
    companyName String?
    startMonth  String?
    startYear   String?
    endMonth    String?
    endYear     String?
    currentlyIn Boolean? @default(false)
    description String?  @db.Text
}

model SkillInfo {
    id          String  @id @default(cuid())
    userId      String
    user        User    @relation(fields: [userId], references: [id])
    name        String?
    rating      Int?
    description String?
}

model AccomplishmentInfo {
    id          String  @id @default(cuid())
    userId      String
    user        User    @relation(fields: [userId], references: [id])
    name        String?
    description String?
}

model Certifications {
    id          String  @id @default(cuid())
    userId      String
    user        User    @relation(fields: [userId], references: [id])
    name        String?
    description String?
    link        String?
}

model ProjectInfo {
    id          String  @id @default(cuid())
    userId      String
    user        User    @relation(fields: [userId], references: [id])
    name        String?
    description String?
    link        String?
}

model PublicationInfo {
    id          String  @id @default(cuid())
    userId      String
    user        User    @relation(fields: [userId], references: [id])
    name        String?
    description String?
    link        String?
}
